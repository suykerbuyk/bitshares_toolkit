/**
@defgroup rpc_api Design of RPC API methods

@RPC method parameter conventions

* <> = required parameter
* [] = optional parameter
* The last positional parameter is an optional parameter dictionary(name/value pairs).

We will support bitcoin-compatible names for the most useful existing bitcoin methods. For example, sendtoaddress, etc.

For bitshares-specific API methods, we will use underscores to separate the words in the method name(e.g. wallet_send_to_account). 

In addition to using underscores, we have the following namespace prefixes for our new RPC methods:

* wallet_
* blockchain_
* p2p_

DACs can further extend the basic prefix namespace. For example, the DNS DAC will add prefixes like:
* dns_blockchain_
* dns_wallet_
* dns_


@Client info and configuration
  help <command|prefix>

Miscellaneous Diagnostics

getinfo: all kinds of info
* bitcoin fields + these below
    ** wallet name
	** wallet file name
	** wallet lock expiration time
    ** priority fee
	** number of delegates
	** number of registered names
	** number of regisered names in wallet
	** number of assets
	** chain name (long form)
	** chain ticker symbol (short form)
	

@Peer network info and configuration
* getpeerinfo
* addnode //missing

  
@Wallet control
@@Wallet file handling
* open_wallet -> wallet_open <name> <passwd>
* create_wallet -> wallet_create <name> <passwd>
* wallet_open_file <filename> <passwd>
* wallet_create_file <filename> <passwd>
* current_wallet -> wallet_get_info
* close_wallet -> wallet_close
* walletlock
* walletpassphrase
* walletpassphrasechange
  
  
* wallet_set_priority_fee
* get_transaction(bitcoin version): only reports on transactions in wallet
* blockchain_get_transaction: reports on all transaction. If it's a wallet transaction, additional info can be reported about the transaction.

@@Wallet delegate selection
* wallet_set_delegate_trust_level <trust,unknown,distrust> //possibly assign a level to the trust
  
  
@@Wallet data querying
* get_transaction_history
  
  
@@Creating/importing keys  
* getnewaddress
* add_send_address
* import_wallet
* import_private_key
* importprivkey
  
* list_send_addresses
* list_receive_addresses

@@Blockchain  
* getblockhash
* getblockcount
* getblock
* get_block_by_number
   
@@Name transactions
* wallet_register_name <name> <is_delegate> <profile data>
* wallet_update_name //possibly can re-use register_name
	
@@Name queries	
* wallet_get_names [start_name] [count]: returns all names that we have registered
* wallet_get_delegates [start_name] [count]: returns all delegates that we have registered
	
* blockchain_get_names [start_name] [count]: returns all names registered in blockchain
* blockchain_get_delegates [start_rank] [count]: return all delegates registered in blockchain, ranked by net vote for and against. This is filtered version of blockchain_get_names.    
	
send_account: extended public key you give to someone. This generates a series 
receive_account: extended private key associated with the send_account you give to someone. 

contact (not an index)
- set of send_accounts
- set of corresponding receive_accounts

* account (has a logical name)
**  invoice: this is a send to somewhere at the user level (user generates these)
***   payment: is a one-time address generated by the system (not manipulated by user)
	  
payment_id: hash of a payment (hash of one-time signed_transaction)	  

invoice
*  memo
*  last_payment_index
  
  
wallet_account_record: this is the "base" type for send and receive accounts (it can represent either).
  * name: name of account, must be unique.  
  * account_index: index into wallet master key (generates keys for this account). A negative index indicates it is a send account.  
  * extended_public_key: generated public key (created from account_index). This is redundant, but it allows us to you to use the public keys without having to unlock the wallet again. In the case of send accounts, it is required because we can't generate this public key (it's someone else's key).
  * transaction_history: any transaction that references keys from this account.
  * map<invoice_index,invoice> invoices
    --a negative invoice_index is used whenever we have an imported key (key can't be generated from index)
  
invoice_summary
*  map<payment_id, signed_transaction>
*  invoice_index
*  last_payment_index

wallet_send_to_address <to_address> [from_account_name] [flags]: does bitcoin support some memo here?
  returns transaction_id
wallet_send_to_account <to_account_name> [from_account_name] [flags] [invoice_memo]: pays an invoice on an account
  returns invoice_summary
flags: BROADCAST: sign and broadcast
       SIGN: sign only
	   UNSIGNED: do nothing extra

wallet_sign_transaction <transaction> (<array of address> | ANY REQUIRED | ALL_REQUIRED)
ANY_REQUIRED: sign with any key required by the transactions that we control.
ALL_REQUIRED: like ANY_REQUIRED must only update the transaction if we can make the transaction valid. Throws an error if we don't have all the needed keys.
Default is ANY_REQUIRED.

//DEPRECATE wallet_get_missing_signatures <transaction>: returns a list of signatures that haven't yet been added to transaction. These are required to broadcast a valid transaction.

wallet_add_receive_account <account_name> -> extended_public_key
-note: name must be unique
wallet_add_send_account <account_name> <extended_public_key>

wallet_get_invoice <account_name> <invoice_index> -> returns invoice_summary
wallet_rename_account <old_account> <new_account> 
-can thrown an error if old_account doesn't exist or new_account exists
-account names must be unique
wallet_delete_account <account_name>
backupwallet <destination_file>

  
@@wallet contacts: Contact is an authorized contact in the keyhotee-sense (a friend). A contact enables to you to send money to someone.
--friend's name
-friend's contact_number: index into contact extended_key array in wallet. We use the index to generate the contact's extended key to generate more extended keys for payments. A payment consist of a number of tranfers to different addresses.

wallet account: is a group of incoming and outgoing payments that can generate a "balance". The account represent a set of keys you control (you have private keys).

-extended_public_key (optional, used for sending)
--last_rece

hkey_index: contact#,payment#,address#

Address is hash of a public key. Internally all addresses are referenced by an hkey_index (address_index/address_position/address_location/address_indices?).

account number 


address is a destination for money (this will replace "account" in the existing code). It's a condition object (multiple keys with conditionals plus potentially a password).

public_key_id_type is a hash of a public key (this will replace "address" in the existing code)

To be implemented: support for bitcoin-styles accounts. These work like traditional accounting accounts. 
	

(get_send_address_label)\
(get_name_record)\
(validateaddress)\
(rescan)\
(set_receive_address_memo)\
(getconnectioncount)\
(_set_advanced_node_parameters)\
(addnode)\
(stop)\


@P2P Diagnostics?
  _get_transaction_propagation_data
  _get_block_propagation_data

@Account support
getaddressesbyaccount <acount> addresses associated with account (payment addresses assosciated with account + 1)
getaccount <address>: account for an address
getaccountaddress <account>: returns current receiving address for account (last_receiving_account+1)
getbalance <account>
getreceivedbyaccount <account>: amount received by
getreceivedbyaddress <address>: amount received by
listreceivedbyaccount
listreceivedbyaddress
listtransactions <account>
setaccount <address> <account>

@Non-bitcoin APIs


@@Kehotee-based API methods

@@Mail
1) mail inbox versus IM delivery display
2) mail: to/from/cc/body/attachments
3)

@@Friend net functionality
Each client knows a set of friends to which they can directly connect via IP address. Exchanges between direct-connected friend peers often don't need to be broadcast to the general network (for example, instant messages and email exchanged between two connected friends). 


@@@ Key exchange and IP address updating
Each client in a friend relationship is also told how to generate a set of deterministic keys that can be used to transfer money to the other client. These keys will also be used to prove/verify the identity of both parities when they connect up. The clients should also be able to send updated IP addresses to each other. So a client whose IP address has changed can still contact a friend, prove its identity via its key, then supply one or more updated IP addresses where it can be reached in the future. Clients can keep track of what IP their friend has for them, so that they could update friends automatically when their IP changes. Tracking is necessary since all friends might not be online to connect to at the time the IP address changes. We might want to periodically attempt to contact out-of-date friends until we successfully update them with our current IP address (probably should be user-configuratable on how often this is done). One possibility might be to try to contact friends with the updated IP whenever the client starts up and goes online.

@@@Avoiding disjoint subnets
Friends can also be peers in the general network, but we need to be sure that this preference can't somehow isolate to a standalone subnetwork. The simplest way to avoid this is to have a separate required/allowed count for standard peers and friend peers.

Also, what prevents this from happening normally in a non-darknet scenario? Solution: if no blocks are being received by a peer, we need to randomly disconnect existing peers and try new ones from the peer database.

IP addresses of friend peers won't be shared during peer list broadcasting.

@@@Friend-related API methods

friend_request <keyhoteeID|public_key>: initiates a request to establish a friend relationship with someone who holds this key.
* This is a broadcast message to the whole network that is used to negotiate direct connections.
* Receiving client needs to ask receiving user to authorize the request.
* Sender needs to be notified when receiver accepts or rejects the friend request.
  
add_friend KeyhoteeID ip key //potentially/optionally other fields in KH contact record as well
* This allows adding an existing friend without having to re-authorize the friend. It can only be done to a KH profile that matches the original friend_request (to enable this we would need to be sure that we can regenerate the extended public that key we shared with them, or else import that key, possibly as another parameter to this command).

set_peer_count: set number of regular (non-friend) peers to establish connection to
set_friend_peer_count: set number of friend peers to establish connections to
connect_friend KeyhoteeID: connect to a specific friend. Does this replace one of the automatically connected friends or is it a connection that is not considered in the friend peer count? 

Could even specify a set of friend peers to connect to (perhaps creating a grouping of contacts). This would be similar to the account-address paradigm. Such groupings could be shared within the group, enabling the creation of a "friend-only" network. This could also be used to improve updating of IP addresses, since this would allow friends to share the IP updates of other friends.



Using KeyhoteeID versus DisplayName?

Need to be notified when user has accepted/rejected authorize request. 
After rejection is acknowledged, I guess we clear the requesting state back to normal.

@@Friend net Data Model (client holds this data)
KeyhoteeID -> extended_public_key_of_friend, ip_addresses_of_friend
              extended_public_key_shared_with_this_friend, ip_addresses_shared_with_this_friend


@@Market API



@@Fees
transaction transmission fee (bandwidth cost)
delegate registration cost
priority fee (to encourage block generator to include this transaction on a priority basis)

@@@blockchain-specific fees
asset registration cost
domain registration cost  
  

*/