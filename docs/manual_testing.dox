/**
@defgroup manual_testing Manual Testing
@brief How to test bts_xt_client and bts_xt_server by hand

@section client-server-testing Testing bts_xt_client in client-server mode

Generate a genesis block
------------------------
To test transferring BTS back and forth between several clients, you'll need
to give one of your clients some BTS in the genesis block.

First, create a keypair by running using `bts_create_key > key.txt`.  This will
create a file called key.txt that looks like:

    private key: 5b5ca05c294f6778f84f0f5ea01f017a0c7e10fcf7a3cba6e67ae0e6318b389d
    bts address: 9dKXjX7vgqF43Z16WQgagG16MNfpzQovv
    pts address: PcBT8L6fyjfNzmnTkp1rwfoQTY4ep7RMQx

This gives you a private key you can import into one of the test clients (with
the corresponding public key formatted two different ways).

Create a text file named `genesis.json` that looks like this:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.json}
{
    "balances": [
        [
          "PcBT8L6fyjfNzmnTkp1rwfoQTY4ep7RMQx",
          1.0
        ]
    ]
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The balances in the genesis block will be scaled to give a total share supply
of BTS_BLOCKCHAIN_INITIAL_SHARES (currently 80 trillion) BTS. So this block will
assign 80,000,000,000,000BTS to address PcBT8L6fyjfNzmnTkp1rwfoQTY4ep7RMQx.
Note that the genesis block references only PTS (or BTC) addresses. All subsequent
transactions will use the BTS form of the address.

Generate a Trustee
------------------
One of your clients will need to be configured as the trustee who is able to
generate blocks.  You'll need to generate another keypair for this, so
run `bts_create_key` again (e.g. `bts_create_key > trustee_key.txt`). For me,
this generated a trustee_key.txt file containing:

    private key: 115c2654c13b5dd62ea1142a0b001f76cc429d5542e6fa35f7d85747a39828ca
    bts address: Meg1Bg3jCeaimZwwePDSok43VCHze3dwE
    pts address: Pp4nvaaqcWahtJzknQuPqySwndy2Akowtj

Launch the Server
-----------------
The server currently puts its data files in the current working directory, so
you probably want to create a clean directory with the `genesis.json` you
generated earlier to run it from:

    mkdir C:\TEMP\BitsharesX_Server
    copy genesis.json C:\TEMP\BitsharesX_Server

Or for Linux:

    mkdir /tmp/btsx_server
    cp genesis.json /tmp/btsx_server

Now run the server from that directory, passing the BTS address of your trustee
on the command line

    cd C:\TEMP\BitsharesX_Server
    E:\Invictus\build\programs\bts_xt\Debug\bts_xt_server.exe --trustee-address Meg1Bg3jCeaimZwwePDSok43VCHze3dwE

The first time the server runs, it will create its initial chain database
from `genesis.json`.  If you want to alter the gensis block for subsequent
runs, you will need to delete the `chain` and restart the server to force
it to regenerate the chain database.

Launch the Clients
------------------
To launch multiple clients, you'll need to start each with a different
configuration directory.  By default, they'll all write to the system-
dependent application data directory.

We'll make the first client act as trustee.  Launch it like this:

    bts_xt_client.exe --data-dir C:\TEMP\BitsharesX_1 --trustee-address Meg1Bg3jCeaimZwwePDSok43VCHze3dwE --trustee-private-key 115c2654c13b5dd62ea1142a0b001f76cc429d5542e6fa35f7d85747a39828ca

The rest of the clients aren't trustee, so they don't get the private key.

Launch two more like this:

    bts_xt_client.exe --data-dir C:\TEMP\BitsharesX_2 --trustee-address Meg1Bg3jCeaimZwwePDSok43VCHze3dwE
    bts_xt_client.exe --data-dir C:\TEMP\BitsharesX_3 --trustee-address Meg1Bg3jCeaimZwwePDSok43VCHze3dwE


After setting your wallet passwords, the clients will download the genesis block
from the server and be ready to go.  You can check your balance with the
`getbalance` command.  All will start out with a zero balance.

    >>> getbalance
    0

Get access to the BTS you put in the genesis block
--------------------------------------------------
Now, import the private key you used in the genesis block into one of the
clients to get access to the BTS from the corresponding address in the genesis
block.  After importing it, rescan the block chain so the client will see
your new balance.  Let's do this in client 1.

    >>> import_private_key "5b5ca05c294f6778f84f0f5ea01f017a0c7e10fcf7a3cba6e67ae0e6318b389d"
    >>> rescan
    done scanning block chain
    >>> getbalance
    100000000

@note the quotes around the private key are required because the arguments are interpreted as JSON values.

Do a transfer
-------------
Now you have some BTS in one of the clients.  Let's send to client 2.  In
client 2, generate an address to receive the BTS.

    >>> getnewaddress
    Te2sQZsqYNFdXvsFT1ieu8kMHsk

Back in client 1, send to this address:

    >>> sendtoaddress Te2sQZsqYNFdXvsFT1ieu8kMHsk 20000000

Client 1 will show you the transaction, ask you to confirm it, and then
broadcast the transaction to the server.

Client 2 should receive the transaction within 30 seconds.  Run getbalance
to verify that the BTS have arrived:

    >>> getbalance
    20000000

*/
